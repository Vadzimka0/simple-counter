{"version":3,"sources":["components/Button.tsx","bll/counterReducer.ts","components/EditValuesMode.tsx","components/CounterMode.tsx","App.tsx","bll/store.ts","index.tsx"],"names":["Button","props","onClick","onClickCallBack","disabled","disable","name","initState","startValue","maxValue","EditValuesMode","callBackSetMode","dispatch","useDispatch","matching","maxValueBorderColor","startValueBorderColor","className","type","value","onChange","e","newMaxValue","currentTarget","valueAsNumber","ChangeMaxValueAC","newStartValue","ChangeStartValueAC","CounterMode","useState","num","setNum","valueColor","App","preloadedState","useSelector","state","counter","editValuesMode","setEditValuesMode","mode","persistedString","localStorage","getItem","JSON","parse","rootReducer","combineReducers","action","store","createStore","window","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42856404.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype ButtonPropsType = {\r\n  onClickCallBack: () => void,\r\n  disable?: boolean,\r\n  name: string\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n  return (\r\n    <button onClick={props.onClickCallBack} disabled={props.disable}>\r\n      {props.name}\r\n    </button>\r\n  );\r\n}","\r\nlet initState = {\r\n  startValue: 2,\r\n  maxValue: 5\r\n};\r\n\r\nexport const counterReducer = (state: any = initState, action: any) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_START_VALUE':\r\n      return {\r\n        ...state,\r\n        startValue: action.startValue\r\n      }\r\n    case 'CHANGE_MAX_VALUE':\r\n      return {\r\n        ...state,\r\n        maxValue: action.maxValue\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport type ChangeStartValueType = { type: 'CHANGE_START_VALUE', startValue: number }\r\nexport const ChangeStartValueAC = (startValue: number): ChangeStartValueType => {\r\n  return {type: 'CHANGE_START_VALUE', startValue}\r\n}\r\n\r\nexport type ChangeMaxValueType = { type: 'CHANGE_MAX_VALUE', maxValue: number }\r\nexport const ChangeMaxValueAC = (maxValue: number): ChangeMaxValueType => {\r\n  return {type: 'CHANGE_MAX_VALUE', maxValue}\r\n}\r\nexport type ReducersType = ChangeStartValueType | ChangeMaxValueType","import React, {ChangeEvent} from \"react\";\r\nimport {Button} from \"./Button\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ChangeMaxValueAC, ChangeStartValueAC, ReducersType} from \"../bll/counterReducer\";\r\n\r\ntype EditModePropsType = {\r\n  startValue: number\r\n  maxValue: number\r\n  callBackSetMode: (mode: boolean) => void\r\n}\r\n\r\nexport const EditValuesMode: React.FC<EditModePropsType> = ({\r\n  startValue, maxValue, callBackSetMode\r\n}) => {\r\n\r\n  const dispatch = useDispatch<Dispatch<ReducersType>>()\r\n\r\n  const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newMaxValue = e.currentTarget.valueAsNumber\r\n    if (newMaxValue < startValue) return;\r\n    dispatch(ChangeMaxValueAC(newMaxValue))\r\n  }\r\n  const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const newStartValue = e.currentTarget.valueAsNumber\r\n    if ((newStartValue > maxValue)) return;\r\n    dispatch(ChangeStartValueAC(newStartValue))\r\n  }\r\n  const onClickGoToCounterMode = () => callBackSetMode(false)\r\n  const matching = startValue === maxValue\r\n  const maxValueBorderColor: string = matching || (maxValue <= 0) ? \"bordered\" : \"\";\r\n  const startValueBorderColor: string = matching || (startValue < 0) ? \"bordered\" : \"\";\r\n\r\n  return (<>\r\n\r\n    <div className=\"info\">\r\n      <div className=\"row\">\r\n        <span>max value:</span>\r\n        <input type=\"number\"\r\n               value={maxValue}\r\n               onChange={onChangeMaxValue}\r\n               className={maxValueBorderColor}\r\n        />\r\n      </div>\r\n      <div className=\"row\">\r\n        <span>start value:</span>\r\n        <input type=\"number\"\r\n               value={startValue}\r\n               onChange={onChangeStartValue}\r\n               className={startValueBorderColor}\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"buttons\">\r\n      <Button\r\n        onClickCallBack={onClickGoToCounterMode}\r\n        disable={matching || (startValue < 0)}\r\n        name=\"set\"\r\n      />\r\n    </div>\r\n\r\n  </>);\r\n};\r\n\r\n","import React, {useState} from \"react\";\r\nimport {Button} from \"./Button\";\r\n\r\ntype CounterModePropsType = {\r\n  startValue: number\r\n  maxValue: number\r\n  callBackSetMode: (mode: boolean) => void\r\n  mode?: boolean\r\n}\r\n\r\nexport const CounterMode: React.FC<CounterModePropsType> = ({\r\n  callBackSetMode, startValue, maxValue\r\n}) => {\r\n\r\n  const [num, setNum] = useState<number>(startValue);\r\n\r\n  const onClickIncrement = () => {\r\n    if (num < maxValue) setNum(num + 1)\r\n  }\r\n  const onClickReset = () => setNum(startValue);\r\n  const onClickGoToEditMode = () => callBackSetMode(true)\r\n  const valueColor: string = `increased ${(num === maxValue) ? \"colored\" : \"\"}`;\r\n\r\n  return (<>\r\n\r\n    <div className=\"info\">\r\n      <div className={valueColor}>{num}</div>\r\n    </div>\r\n\r\n    <div className=\"buttons\">\r\n      <Button\r\n        onClickCallBack={onClickIncrement}\r\n        disable={num === maxValue}\r\n        name=\"inc\"\r\n      />\r\n      <Button\r\n        onClickCallBack={onClickReset}\r\n        disable={num === startValue}\r\n        name=\"reset\"\r\n      />\r\n      <Button\r\n        onClickCallBack={onClickGoToEditMode}\r\n        name=\"set\"\r\n      />\r\n    </div>\r\n\r\n  </>);\r\n};","import React, {useState} from 'react';\nimport {EditValuesMode} from \"./components/EditValuesMode\";\nimport {CounterMode} from \"./components/CounterMode\";\nimport {useSelector} from \"react-redux\";\nimport {AppGlobalType} from \"./bll/store\";\n\n\nfunction App() {\n\n  const startValue = useSelector<AppGlobalType, number>(state => state.counter.startValue)\n  const maxValue = useSelector<AppGlobalType, number>(state => state.counter.maxValue)\n  const [editValuesMode, setEditValuesMode] = useState(true)\n\n  return (\n    <div className=\"wrapper\">\n      {\n        editValuesMode\n          ? <EditValuesMode\n            startValue={startValue}\n            maxValue={maxValue}\n            callBackSetMode={setEditValuesMode}\n          />\n          : <CounterMode\n            startValue={startValue}\n            maxValue={maxValue}\n            callBackSetMode={setEditValuesMode}\n            mode={editValuesMode}\n          />\n      }\n    </div>\n  )\n}\n\nexport default App;\n\n\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\n\r\nlet preloadedState;\r\nconst persistedString = localStorage.getItem('app_state')\r\nif (persistedString) {\r\n  preloadedState = JSON.parse(persistedString)\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer\r\n})\r\n\r\nexport type AppGlobalType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, preloadedState);\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\nstore.subscribe(() => {\r\n  localStorage.setItem('app_state', JSON.stringify(store.getState()))\r\n})\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n/*import reportWebVitals from './reportWebVitals';*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n//reportWebVitals();\n"],"sourceRoot":""}